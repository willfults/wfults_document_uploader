package mypackage;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.Response;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.io.IOUtils;
import org.jboss.resteasy.annotations.providers.jaxb.json.BadgerFish;
import org.jboss.resteasy.plugins.providers.multipart.InputPart;
import org.jboss.resteasy.plugins.providers.multipart.MultipartFormDataInput;

import util.DateUtil;

@Path("/rest/folders")
public class FolderResource {
	
	private final String DIRECTORY_LOCATION = "C:/jboss-4.2.2.GA";
	
	@GET
	@Produces("application/json")
	@Path("/details")
	public List<Map<String, Object>> getFolderDetails(@QueryParam("location") String location) {
	    File folderInfo = new File(DIRECTORY_LOCATION + "/" + location);
	    File[] listOfFiles = folderInfo.listFiles();
	    List<Map<String, Object>> folders = new ArrayList<Map<String, Object>>();
	    for (File file : listOfFiles) {
	        Map<String, Object> folder = new LinkedHashMap<String, Object>();
	        if(file.isDirectory()){
	        	folder.put("fileType","folder");
	        }else{
	        	folder.put("fileType", "file");
	        }
	        folder.put("name", file.getName());
	        folder.put("size", file.length()/1000);
	        folder.put("lastModified", DateUtil.getFormattedDate(new Date(file.lastModified())));
	        folders.add(folder);
	    }
	    return folders;
	}
	
	@GET
	@Path("/create")
	public void createFolder(@QueryParam("folderName") String folderName){
		new File(DIRECTORY_LOCATION + "/" + folderName).mkdirs();
	}
	
	@GET
	@Path("/delete")
	@Produces("application/json")
	 public String DeleteDir(@QueryParam("folderName") String folderName)   {
         File directory = new File(DIRECTORY_LOCATION + folderName);
         recursiveDelete(directory);
         return "ok";
	}
	
	 private void recursiveDelete(File file) {
         if (!file.exists()) return;
         if (file.isDirectory()) {
            for (File f : file.listFiles()) recursiveDelete(f);
            file.delete();
         } else {
            file.delete();
         }
	 }	 
	
	@POST
	@Path("/upload")
	@Consumes("multipart/form-data")
	public Response uploadFile(MultipartFormDataInput input, @QueryParam("directory") String directory) {
 
		String fileName = "";
 
		Map<String, List<InputPart>> uploadForm = input.getFormDataMap();
		List<InputPart> inputParts = uploadForm.get("uploadedFile1");
		inputParts.addAll(uploadForm.get("uploadedFile2"));
		inputParts.addAll(uploadForm.get("uploadedFile3"));
		for (InputPart inputPart : inputParts) {
 
		 try {
 
			MultivaluedMap<String, String> header = inputPart.getHeaders();
			fileName = getFileName(header);
 
			//convert the uploaded file to inputstream
			InputStream inputStream = inputPart.getBody(InputStream.class,null);
 
			byte [] bytes = IOUtils.toByteArray(inputStream);
 
			//constructs upload file path
			fileName = DIRECTORY_LOCATION + directory + fileName;
			System.out.println(fileName);
			writeFile(bytes,fileName);
 
			System.out.println("Done");
 
		  } catch (IOException e) {
			e.printStackTrace();
		  }
 
		}
	
		return Response.status(200)
		    .entity("<script>window.location = '../../index.jsp?directory='" + directory + "</script> ").build();
 
	}
 
	/**
	 * header sample
	 * {
	 * 	Content-Type=[image/png], 
	 * 	Content-Disposition=[form-data; name="file"; filename="filename.extension"]
	 * }
	 **/
	//get uploaded filename, is there a easy way in RESTEasy?
	private String getFileName(MultivaluedMap<String, String> header) {
 
		String[] contentDisposition = header.getFirst("Content-Disposition").split(";");
 
		for (String filename : contentDisposition) {
			if ((filename.trim().startsWith("filename"))) {
 
				String[] name = filename.split("=");
 
				String finalFileName = name[1].trim().replaceAll("\"", "");
				return finalFileName;
			}
		}
		return "unknown";
	}
 
	//save to somewhere
	private void writeFile(byte[] content, String filename) throws IOException {
 
		File file = new File(filename);
 
		if (!file.exists()) {
			file.createNewFile();
		}
 
		FileOutputStream fop = new FileOutputStream(file);
 
		fop.write(content);
		fop.flush();
		fop.close();
 
	}
}
